type: edu
custom_name: stage6
files:
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES = "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import search.Main;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {
        public SimpleSearchEngineTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>().setAttach(
                    new TestClue("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")).setInput("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES),


                new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")).setInput("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        List<Integer> result = new ArrayList<>();

                        List<String> intendedResult = new ArrayList<>();

                        while (true) {
                            String mode = inputLines[currentInputLine].trim().toLowerCase();
                            currentInputLine++;

                            String toSearch = "";

                            if (mode.equalsIgnoreCase("all")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (!(s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck))) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("any")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = false;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = true;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("none")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            }
                        }

                        String[] userResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                userResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(userResult);

                        if (!Arrays.equals(correctOutput, userResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
- name: src/search/menu/Menu.kt
  visible: true
  text: |
    package search.menu

    import search.Main

    class Menu(vararg actions: MenuAction) {
        private val actionsMap = LinkedHashMap<Int, MenuAction>()
        private val exit: Exit = Exit

        init {
            for ((i, action) in actions.withIndex()) {
                actionsMap[i + 1] = action
            }
            actionsMap[0] = exit
        }

        fun select(index: Int) = actionsMap[index] ?: IncorrectAction

        override fun toString(): String = "=== Menu ===\n" +
                actionsMap.asIterable()
                        .joinToString("\n") { (i, a) -> "$i. $a" }

        fun loop(main: Main) {
            do {
                val commandId = main.readInt("$this\n")
                val command = select(commandId)

                command.invoke(main)
            } while (command != exit)
        }
    }
  learner_created: true
- name: src/search/Main.kt
  visible: true
  text: |
    package search

    import search.menu.Find
    import search.menu.Menu
    import search.menu.PrintAll
    import java.io.File
    import java.util.*

    class Main(private val scanner: Scanner) {
        companion object {
            @JvmStatic
            fun main(args: Array<String>) {
                val data = File(args[1]).readLines()
                val main = Main(Scanner(System.`in`))
                val tokens = data.map(Token.Companion::from)
                val search = Search(tokens)
                val menu = Menu(Find(search), PrintAll(data))
                menu.loop(main)
            }
        }

        fun readInt(hint: String): Int {
            print(hint)
            return readLine().toInt()
        }

        fun readLine(hint: String = ""): String {
            print(hint)
            return scanner.nextLine()
        }

        fun readLines(count: Int, hint: String = ""): List<String> {
            print(hint)
            return MutableList(count) { readLine() }
        }

        fun putList(list: List<String>, hint: String = "", failHint: String = "") {
            if (list.isEmpty()) {
                print(failHint)
            } else {
                print(hint)
            }
            list.forEach(::println)
        }
    }
  learner_created: true
- name: src/search/menu/PrintAll.kt
  visible: true
  text: |
    package search.menu

    import search.Main

    class PrintAll(private val people: List<String>) : MenuAction {
        override fun toString() = "Print all people"

        override fun invoke(main: Main) {
            main.putList(people, "", "No matching people found.\n")
        }
    }
  learner_created: true
- name: src/search/Token.kt
  visible: true
  text: |
    package search

    interface Token {
        fun matches(word: String): Boolean
        val keys: List<String>
        val value: String
            get() = toString()

        override fun toString(): String

        companion object {
            fun from(string: String) = object : Token {
                override fun toString() = string
                override fun matches(word: String) =
                        string.contains(word, true)

                override val keys: List<String>
                    get() = string.split(" ")
            }
        }
    }
  learner_created: true
- name: src/search/menu/MenuAction.kt
  visible: true
  text: |
    package search.menu

    import search.Main

    interface MenuAction {
        override fun toString(): String
        operator fun invoke(main: Main)
    }
  learner_created: true
- name: src/search/menu/Find.kt
  visible: true
  text: |-
    package search.menu

    import search.Main
    import search.Search

    class Find(val search: Search) : MenuAction {
        override fun toString() = "Find a person"

        override fun invoke(main: Main) {
            println("Enter a name or email to search all suitable people.")
            val result = search.find(main.readLine())
            main.putList(result, "", "No matching people found.\n")
        }
    }
  learner_created: true
- name: src/search/menu/Exit.kt
  visible: true
  text: |-
    package search.menu

    import search.Main

    object Exit : MenuAction {
        override fun toString() = "Exit"

        override fun invoke(main: Main) {
            println("Bye!")
        }
    }
  learner_created: true
- name: src/search/menu/IncorrectAction.kt
  visible: true
  text: |-
    package search.menu

    import search.Main

    object IncorrectAction : MenuAction {
        override fun toString(): String = "Incorrect option! Try again."
        override fun invoke(main: Main) = println(this)
    }
  learner_created: true
- name: src/search/Search.kt
  visible: true
  text: |
    package search

    class Search(private val data: List<Token>) {
        private val index = HashMap<String, MutableList<Token>>()

        init {
            data.forEach { token ->
                token.keys.forEach { key ->
                    index.computeIfAbsent(key) { ArrayList() }
                    index[key]?.add(token)
                }
            }
        }

        fun find(query: String): List<String> =
                index[query]?.map { it.toString() }
                        ?: listOf()
    }
  learner_created: true
- name: src/search/SearchStrategy.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/359/implement
status: Solved
record: 6
